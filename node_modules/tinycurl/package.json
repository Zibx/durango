{
  "name": "tinycurl",
  "version": "0.0.4",
  "description": "Tiny curl wrapper. Can solve problems with making requests",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Zibx/tinycurl.git"
  },
  "keywords": [
    "curl",
    "request",
    "ssl",
    "pem",
    "https"
  ],
  "author": {
    "name": "Zibx"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "5e6fbc15347100dcaf02aeedde8c52a23a23d3fa",
  "readme": "**tinycurl** is a tiny node wrapper for the command line **curl**\r\n\r\n```bash\r\n$ npm install tinycurl\r\n```\r\n\r\n## Reason\r\n\r\nNode.js doesn't give some features that curl provides.\r\nI was playing with ssl post request for use a remote SOAP service for 3 days.\r\nI've wrote 5 solutions in this period, tried pfx, pem, p12, different headers, enabling\\disabling security, but it still don't work. I had some progress in making GET request, but I need POST.\r\nMaybe reason was in wrong cerificates or our partner don't give us a CA or maybe I have got not right curved hands.\r\nAfter all I'd used SOAP UI desktop tool and it somehow did that request.\r\nAfter 20 minutes spent for reading curl docs, I was able to make this request with a warning.\r\n\r\nFinally node-soap && curlrequest modules in npm are depended on some windows stuff and their code is an overkill for this task.\r\n\r\n## When you should use it\r\n\r\n- Curl have got some features that node.js doesn't and you need it\r\n- If you stubbed with something about SSL\r\n\r\n## When you should avoid of using it\r\n\r\n- When node.js native implementation suits\r\n\r\n## Usage\r\n\r\nMake a request with curl - callback receives `(err, data)` on request\r\ncompletion\r\n\r\n```javascript\r\nvar curl = require( 'tinycurl' );\r\n\r\n\r\ncurl.post( 'https://test.com', {\r\n    // tinycurl make an assumption that all keys with\r\n    // length <3 need to be prefixed with two dashes\r\n    // maybe it's wrong\r\n    headers: [ // headers are an array\r\n        'SOAPAction: http://test.com/serviceprovider/TheService/Act',\r\n        'Content-type: text/xml; charser=utf-8'\r\n    ],\r\n    key: 'key.pem',\r\n    cert: 'cert.pem',\r\n\r\n    // you can put multiline data here\r\n    // but if you want to use objects - you have to JSON.stringify\r\n    // them or serialize any other way that you want\r\n    // you even can write a tinycurl extension for it\r\n    data: 'hello'\r\n}, callback );\r\n```\r\n\r\nExtending tinycurl\r\n\r\n```javascript\r\nvar convertions = curl.getConvert(); // hash of conversion functions\r\n\r\nconvertions.myCoolFeature = function( val, args ){\r\n    // it's a pure function. val is a value of option and args is\r\n    // an array with all rules. order is using for command line options sort\r\n    args.push({order:2, data: ['-CoolFeature', val]});\r\n}\r\n```\r\n\r\n**Predefined request types wrapper**\r\n- curl.request( url, options, callback );\r\n- curl.post( url, options, callback );\r\n- curl.get( url, options, callback );\r\n\r\n## Low level\r\n\r\nIf you want to handle curl stdout\\stderr data\r\nwhen it comes - you can use the output observable object\r\n\r\n```javascript\r\nvar req = curl.request( url, options, callback );\r\nreq.on( 'stdout', function( data ){\r\n    // whatever\r\n} );\r\n```\r\n\r\nIf you want to handle real low level of process - use option \"low\".\r\nIt would return a real child_process.spawn object.\r\n\r\n```javascript\r\nvar req = curl.request( url, {low: true}, callback );\r\nreq.stderr.on( 'data', function( data ){\r\n    console.log('oh no!');\r\n} );\r\n```\r\n\r\n## Options\r\n\r\nRead \"man curl\".\r\n\r\n## License\r\n\r\nCopyright (c) 2014 Zibx <zibx.mail+npm@gmail.com>\r\nThe MIT License (MIT)\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n",
  "bugs": {
    "url": "https://github.com/Zibx/tinycurl/issues"
  },
  "homepage": "https://github.com/Zibx/tinycurl",
  "_id": "tinycurl@0.0.4",
  "_shasum": "9b71b89c0afc6c699757cc0d8be14d05f7da4574",
  "_from": "tinycurl@*"
}
